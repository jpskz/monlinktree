// SÃ©lectionne le bouton
const toggleThemeButton = document.getElementById('theme-toggle');

// Ã‰couteur d'Ã©vÃ©nements pour le clic sur le bouton
toggleThemeButton.addEventListener('click', () => {
    // Bascule la classe 'dark-theme' sur le body
    document.body.classList.toggle('dark-theme');

    // VÃ©rifie si le mode sombre est activÃ©
    const isDarkTheme = document.body.classList.contains('dark-theme');

    // Change le texte du bouton en fonction du thÃ¨me
    toggleThemeButton.innerText = isDarkTheme ? 'ðŸŒž Changer en mode clair' : 'ðŸŒ™ Changer en mode sombre';

    // Sauvegarde le thÃ¨me choisi dans le stockage local
    localStorage.setItem('theme', isDarkTheme ? 'dark' : 'light');
});

// Charge le thÃ¨me au dÃ©marrage
const savedTheme = localStorage.getItem('theme');
if (savedTheme === 'dark') {
    document.body.classList.add('dark-theme');
    toggleThemeButton.innerText = 'ðŸŒž Changer en mode clair'; // Met Ã  jour le texte du bouton
}


// Fonction pour mettre Ã  jour l'heure en temps rÃ©el
function updateClock() {
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    
    // Format de l'heure HH:MM:SS
    const currentTime = `${hours}:${minutes}:${seconds}`;
    
    // Affiche l'heure dans l'Ã©lÃ©ment avec l'ID 'real-time-clock'
    document.getElementById('real-time-clock').textContent = currentTime;
}

// Met Ã  jour l'horloge toutes les secondes
setInterval(updateClock, 1000);

// Appel initial pour dÃ©finir l'heure dÃ¨s le chargement de la page
updateClock();

